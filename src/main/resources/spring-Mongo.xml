<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <!--base beans of framework start -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:mongo.properties</value>
            </list>
        </property>
    </bean>
    <bean id="mongclientOptionFactory" class="com.zhao.ssm.util.MongoClientOptionWrapper">
        <property name="connectionsPerHost" value="1000"/>
        <property name="autoConnectRetry" value="true"/>
    </bean>
    <bean id="mongoClientOption" class="com.mongodb.MongoClientOptions"
          factory-bean="mongclientOptionFactory" factory-method="getOptions"
         />
    <bean id="mongoNode1" class="com.mongodb.ServerAddress">
        <constructor-arg value="${mongo.host}"/>
        <constructor-arg value="${mongo.port}"/>
    </bean>
    <bean id="mongo" class="com.mongodb.MongoClient">
        <description>Mongo pool</description>
        <constructor-arg type="java.util.List">
            <list>
                <ref bean="mongoNode1"/>
            </list>
        </constructor-arg>
        <constructor-arg ref="mongoClientOption" type="com.mongodb.MongoClientOptions"/>
    </bean>
    <bean id="resourceProvider" class="org.canedata.provider.mongodb.MongoResourceProvider">
        <description>Mongo resource provider</description>
        <property name="mongo">
            <ref bean="mongo"/>
        </property>
        <property name="defaultDbName">
            <value>ssm</value>
        </property>
    </bean>
    <!-- <bean id="cacheProvider" class="org.canedata.module.ehcache.EhcacheProvider">
        <description>Ehcache provider</description>
        <property name="cacheName" value="sampleCache"></property>
        <property name="configFile" value="conf/ehcache.xml"></property>
    </bean> -->
    <bean id="mongoProvider" class="org.canedata.provider.mongodb.MongoProvider">
        <description>EntityFactory by Mongo provider</description>
    </bean>
    <bean id="entityFactory"
          class="org.canedata.provider.mongodb.entity.MongoEntityFactory"
          factory-bean="mongoProvider" factory-method="getFactory">
        <description>Mongo entity factory provider</description>
        <constructor-arg type="java.lang.String" value="default"></constructor-arg>
        <constructor-arg ref="resourceProvider"></constructor-arg>
        <!--  <constructor-arg ref="cacheProvider"></constructor-arg> -->
    </bean>

    <bean id="healthFoodService" class="com.zhao.ssm.service.HealthFoodServiceImpl">
        <property name="entityFactory" ref="entityFactory"/>
    </bean>

    <bean id="healthFoodTask" class="com.zhao.ssm.task.HealthFoodTask">

    </bean>

    <!--

        任务相关start
         要执行任务的任务类。
        <bean id="someJob" class="com.zhao.ssm.task.HealthFoodTask">

        </bean>

         将需要执行的定时任务注入JOB中。
        <bean id="testJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
            <property name="targetObject" ref="someJob"></property>
             任务类中需要执行的方法
            <property name="targetMethod" value="dowork"></property>
             上一次未执行完成的，要等待有再执行。
            <property name="concurrent" value="false"></property>
        </bean>

         基本的定时器，会绑定具体的任务。

        <bean id="someJobTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
            <property name="jobDetail" ref="testJob"></property>
            <property name="cronExpression" value="1 1 1 1 1 ?"></property>
        </bean>

        <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
            <property name="triggers">
                <list>
                    <ref bean="someJobTriggerBean"></ref>
                </list>
            </property>
        </bean>
        任务相关over
    -->

</beans>